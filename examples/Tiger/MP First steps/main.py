import pyb
from machine import Pin
from pyb import freq, udelay, millis

bmp =  [  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xc3, 0xff, 0x00, 0x7f,
  0xff, 0x8f, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0x81, 0xff, 0x00, 0x7f,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xfc, 0x3f, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0x7f,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xfc, 0x1f, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf8, 0x0f, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0x00, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf8, 0x0f, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf8, 0x0f, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf8, 0x0f, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf8, 0x0f, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf8, 0x0f, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf8, 0x0f, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xf8, 0x0f, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xf8, 0x0f, 0xff, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xf0, 0x07, 0xff, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xf0, 0x07, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xf0, 0x07, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xc0, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xf0, 0x1f, 0xf0, 0x07, 0xff, 0x03, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 0x00, 0x3f, 0xf0, 0x1f, 0xe0, 0x3f, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xf8, 0x1f, 0xf0, 0x03, 0xff, 0x03, 0xff, 0xff, 0x80, 0x1f, 0xfe, 0x0f, 0xf0, 0xfe, 0x03, 0xff, 0xff, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xfc, 0x00, 0x1f, 0xf0, 0x1f, 0xe0, 0x3f, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xf8, 0x1f, 0xe0, 0x03, 0xff, 0x03, 0xff, 0xfe, 0x00, 0x0f, 0xfc, 0x07, 0xc0, 0x7e, 0x03, 0xff, 0xff, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xf8, 0x00, 0x0f, 0xf0, 0x1f, 0xe0, 0x3f, 0xff, 0x80, 0x00, 0xff, 0xff, 0xf8, 0x1f, 0xe0, 0x03, 0xfe, 0x03, 0xff, 0xfc, 0x00, 0x07, 0xfc, 0x07, 0x80, 0x3e, 0x03, 0xff, 0xff, 0xe0, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xf0, 0x00, 0x0f, 0xf0, 0x1f, 0xe0, 0x3f, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x1f, 0xe0, 0x83, 0xfe, 0x07, 0xff, 0xf0, 0x00, 0x07, 0xfc, 0x07, 0x00, 0x3e, 0x03, 0xff, 0xff, 0x00, 0x00, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0x80, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x07, 0xf0, 0x1f, 0xe0, 0x3f, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x1f, 0xe0, 0x81, 0xfe, 0x07, 0xff, 0xe0, 0x00, 0x03, 0xfc, 0x06, 0x00, 0x3e, 0x03, 0xff, 0xfe, 0x00, 0x00, 0xff, 0x80, 0xff,
  0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x3c, 0x07, 0xf0, 0x1f, 0xe0, 0x3f, 0xfc, 0x03, 0xc0, 0x7f, 0xff, 0xfc, 0x1f, 0xc0, 0x81, 0xfe, 0x07, 0xff, 0xe0, 0x1e, 0x03, 0xfc, 0x04, 0x00, 0x1e, 0x03, 0xff, 0xf8, 0x00, 0x00, 0xff, 0x80, 0xff,
  0xfc, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x7e, 0x03, 0xf0, 0x1f, 0xe0, 0x3f, 0xf8, 0x07, 0xe0, 0x3f, 0xff, 0xfc, 0x0f, 0xc1, 0x81, 0xfc, 0x07, 0xff, 0xc0, 0x3f, 0x01, 0xfc, 0x00, 0x00, 0x1e, 0x03, 0xff, 0xf0, 0x00, 0x00, 0xff, 0x80, 0xff,
  0xfc, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0xff, 0x03, 0xf0, 0x1f, 0xe0, 0x3f, 0xf0, 0x0f, 0xe0, 0x3f, 0xff, 0xfc, 0x0f, 0xc1, 0xc0, 0xfc, 0x0f, 0xff, 0x80, 0x7f, 0x01, 0xfc, 0x00, 0x30, 0x1e, 0x03, 0xff, 0xe0, 0x00, 0x00, 0xff, 0x80, 0xff,
  0xfc, 0x00, 0x00, 0x00, 0x07, 0xff, 0x01, 0xff, 0x03, 0xf0, 0x1f, 0xe0, 0x3f, 0xf0, 0x1f, 0xe0, 0x3f, 0xff, 0xfc, 0x0f, 0x81, 0xc0, 0xfc, 0x0f, 0xff, 0x80, 0xff, 0x01, 0xfc, 0x00, 0x70, 0x1e, 0x03, 0xff, 0xc0, 0x1e, 0x00, 0xff, 0x80, 0xff,
  0xfc, 0x00, 0x00, 0x00, 0x07, 0xff, 0x03, 0xff, 0x03, 0xf0, 0x1f, 0xe0, 0x3f, 0xe0, 0x3f, 0xf0, 0x3f, 0xff, 0xfe, 0x0f, 0x81, 0xc0, 0xfc, 0x0f, 0xff, 0x01, 0xff, 0x81, 0xfc, 0x00, 0xf0, 0x1e, 0x03, 0xff, 0x80, 0x3f, 0x00, 0xff, 0x80, 0xff,
  0xfc, 0x00, 0x00, 0x1c, 0x07, 0xfe, 0x03, 0xfe, 0x03, 0xf0, 0x1f, 0xe0, 0x3f, 0xe0, 0x3f, 0xf0, 0x1f, 0xff, 0xfe, 0x0f, 0x83, 0xe0, 0xf8, 0x1f, 0xff, 0x01, 0xff, 0x80, 0xfc, 0x01, 0xf0, 0x1e, 0x03, 0xff, 0x80, 0x7f, 0x00, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xfe, 0x07, 0xf8, 0x07, 0xf0, 0x1f, 0xe0, 0x3f, 0xc0, 0x7f, 0xf0, 0x1f, 0xff, 0xfe, 0x0f, 0x83, 0xe0, 0x78, 0x1f, 0xfe, 0x03, 0xff, 0x80, 0xfc, 0x01, 0xf0, 0x3e, 0x03, 0xff, 0x00, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xfc, 0x07, 0xc0, 0x07, 0xf0, 0x1f, 0xe0, 0x3f, 0xc0, 0x7f, 0xf0, 0x1f, 0xff, 0xfe, 0x07, 0x03, 0xe0, 0x78, 0x1f, 0xfe, 0x03, 0xff, 0x80, 0xfc, 0x03, 0xf8, 0x7e, 0x03, 0xfe, 0x01, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xfc, 0x04, 0x00, 0x0f, 0xf0, 0x1f, 0xe0, 0x3f, 0xc0, 0xff, 0xf0, 0x1f, 0xff, 0xfe, 0x07, 0x07, 0xe0, 0x78, 0x1f, 0xfe, 0x07, 0xff, 0x80, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xfe, 0x03, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xfc, 0x00, 0x00, 0x3f, 0xf0, 0x1f, 0xe0, 0x3f, 0x80, 0xff, 0xf0, 0x1f, 0xff, 0xfe, 0x07, 0x07, 0xf0, 0x30, 0x3f, 0xfc, 0x07, 0xff, 0x80, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xfc, 0x03, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xf8, 0x00, 0x00, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0x80, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0x06, 0x07, 0xf0, 0x30, 0x3f, 0xfc, 0x07, 0xff, 0x80, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xfc, 0x07, 0xff, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xf8, 0x00, 0x03, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0x80, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0x06, 0x07, 0xf0, 0x30, 0x3f, 0xfc, 0x07, 0xff, 0x80, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xf8, 0x0f, 0xff, 0x00, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xf8, 0x00, 0x1f, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0x81, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0x06, 0x0f, 0xf8, 0x30, 0x3f, 0xfc, 0x0f, 0xff, 0x81, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xf8, 0x0f, 0xff, 0x00, 0xff, 0x00, 0x7f,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xf8, 0x01, 0xff, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0x01, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0x02, 0x0f, 0xf8, 0x10, 0x3f, 0xf8, 0x0f, 0xff, 0x81, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xf8, 0x0f, 0xff, 0x00, 0xff, 0x00, 0x7f,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xf8, 0x1f, 0xff, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0x01, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0x00, 0x0f, 0xf8, 0x10, 0x7f, 0xf8, 0x0f, 0xff, 0x81, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xf0, 0x1f, 0xfe, 0x00, 0xff, 0x00, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xf0, 0x1f, 0xff, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0x01, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0x00, 0x1f, 0xf8, 0x00, 0x7f, 0xf8, 0x0f, 0xff, 0x01, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xf0, 0x1f, 0xfe, 0x00, 0xff, 0x81, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xf0, 0x1f, 0xff, 0x0f, 0xf0, 0x1f, 0xe0, 0x3f, 0x01, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0x00, 0x1f, 0xfc, 0x00, 0x7f, 0xf8, 0x0f, 0xff, 0x01, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xf0, 0x1f, 0xfc, 0x00, 0xff, 0xc3, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xf0, 0x1f, 0xfe, 0x07, 0xf0, 0x1f, 0xe0, 0x3f, 0x01, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0x80, 0x1f, 0xfc, 0x00, 0x7f, 0xf8, 0x0f, 0xff, 0x03, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xe0, 0x3f, 0xf8, 0x00, 0xff, 0xff, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xf0, 0x1f, 0xfe, 0x07, 0xf0, 0x1f, 0xe0, 0x3f, 0x01, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0x80, 0x1f, 0xfc, 0x00, 0x7f, 0xf8, 0x0f, 0xfe, 0x03, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xe0, 0x3f, 0xf8, 0x00, 0xff, 0xff, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xf0, 0x1f, 0xfe, 0x07, 0xf0, 0x1f, 0xe0, 0x3f, 0x01, 0xff, 0xc0, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xfe, 0x00, 0xff, 0xf8, 0x0f, 0xfe, 0x07, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xe0, 0x3f, 0xf0, 0x00, 0xff, 0xff, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xf0, 0x1f, 0xfc, 0x07, 0xf0, 0x1f, 0xe0, 0x3f, 0x01, 0xff, 0x80, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xfe, 0x00, 0xff, 0xf8, 0x0f, 0xfc, 0x07, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xe0, 0x3f, 0xe0, 0x00, 0xff, 0xff, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xf0, 0x1f, 0xfc, 0x07, 0xf0, 0x1f, 0xe0, 0x3f, 0x00, 0xff, 0x01, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xfe, 0x00, 0xff, 0xf8, 0x07, 0xf8, 0x0f, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xe0, 0x3f, 0xc0, 0x80, 0xff, 0xe1, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xf0, 0x1f, 0xf0, 0x0f, 0xf0, 0x1f, 0xe0, 0x3f, 0x80, 0xff, 0x01, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xfe, 0x00, 0xff, 0xfc, 0x07, 0xf8, 0x0f, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xe0, 0x3f, 0xc0, 0x80, 0xff, 0xc1, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xf8, 0x0f, 0xe0, 0x1f, 0xf0, 0x1f, 0xe0, 0x3f, 0x80, 0xfc, 0x03, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xfe, 0x00, 0xff, 0xfc, 0x07, 0xe0, 0x1f, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xe0, 0x3f, 0x01, 0x80, 0xff, 0x80, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xf8, 0x07, 0x80, 0x1f, 0xf0, 0x1f, 0xe0, 0x3f, 0x80, 0x78, 0x07, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0x00, 0xff, 0xfc, 0x03, 0xc0, 0x3f, 0xfc, 0x07, 0xff, 0xfe, 0x03, 0xe0, 0x1e, 0x03, 0x80, 0xff, 0x00, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x0f, 0xe0, 0x1f, 0xc0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xfc, 0x03, 0xff, 0xfe, 0x01, 0xf0, 0x00, 0x07, 0x80, 0xff, 0x00, 0xff,
  0xfc, 0x03, 0xff, 0xf8, 0x07, 0xfc, 0x00, 0x00, 0x7f, 0xf0, 0x0f, 0xe0, 0x1f, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0x01, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xf8, 0x03, 0xff, 0xfe, 0x01, 0xf0, 0x00, 0x0f, 0x80, 0x7f, 0x00, 0xff,
  0xfc, 0x03, 0xff, 0xfc, 0x07, 0xfc, 0x00, 0x01, 0xff, 0xf0, 0x0f, 0xe0, 0x1f, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0x01, 0xff, 0xff, 0x00, 0x01, 0xff, 0xf8, 0x03, 0xff, 0xfe, 0x01, 0xf8, 0x00, 0x1f, 0x80, 0x7f, 0x00, 0xff,
  0xfe, 0x03, 0xff, 0xfc, 0x07, 0xfe, 0x00, 0x03, 0xff, 0xf0, 0x1f, 0xe0, 0x3f, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0x01, 0xff, 0xff, 0x80, 0x03, 0xff, 0xf8, 0x07, 0xff, 0xfe, 0x03, 0xf8, 0x00, 0x7f, 0x80, 0xff, 0x81, 0xff,
  0xff, 0x07, 0xff, 0xfe, 0x1f, 0xff, 0x00, 0x0f, 0xff, 0xfc, 0x3f, 0xf8, 0x7f, 0xf8, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0x81, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0x87, 0xfc, 0x00, 0xff, 0xc1, 0xff, 0xc3, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ]

class QLCD:
    class I1:

        I1_0INACTIVE = 0
        I1_2TEXT = 1
        I1_4GRAPH1 = 2
        I1_6GRAPH2 = 3
        I1_8SETCH = 4

        LAYER_1 = 0
        LAYER_2 = 1
        LAYER_NUM = 2

        def __init__(self, foo):
            self.__tadr_auto = 0
            self.__tgroup_size = 0
            self.__mode_set = 0x80
            self.__display_mode = 0x9F
            self.__inhibit_hcodes = True
            self.__modus = self.I1_0INACTIVE
            self.__g1_actflg = False
            self.__g1_gha_flg = True
            self.__g1_nextgha = 0
            self.__g1_l2_act = False
            self.__g1_rest   = 0
            self.__g1_restlen_layer = 0
            self.__g1_layer = self.LAYER_1
            self.__gra1_state = foo

        @property
        def tadr_auto(self):
            return self.__tadr_auto

        @tadr_auto.setter
        def tadr_auto(self, value):
            self.__tadr_auto = value

        @property
        def tgroup_size(self):
            return self.__tgroup_size

        @tgroup_size.setter
        def tgroup_size(self, value):
            self.__tgroup_size = value

        @property
        def mode_set(self):
            return self.__mode_set

        @mode_set.setter
        def mode_set(self, value):
            self.__mode_set = value

        @property
        def display_mode(self):
            return self.__display_mode

        @display_mode.setter
        def display_mode(self, value):
            self.__display_mode = value

        @property
        def inhibit_hcodes(self):
            return self.__inhibit_hcodes

        @inhibit_hcodes.setter
        def inhibit_hcodes(self, value):
            if type(value) != bool:
                raise TypeError("Type must be Boolean")
            self.__inhibit_hcodes = value

        @property
        def modus(self):
            return self.__modus

        @modus.setter
        def modus(self, value):
            if value != self.I1_0INACTIVE and value != self.I1_2TEXT and value != self.I1_8SETCH and value != self.I1_4GRAPH1 and value != self.I1_6GRAPH2:
                raise ValueError("Value must be among the available ones")
            self.__modus = value

        @property
        def g1_actflg(self):
            return self.__g1_actflg

        @g1_actflg.setter
        def g1_actflg(self, value):
            if type(value) != bool:
                raise TypeError("Type must be Boolean")
            self.__g1_actflg = value

        @property
        def g1_gha_flg(self):
            return self.__g1_gha_flg

        @g1_gha_flg.setter
        def g1_gha_flg(self, value):
            if type(value) != bool:
                raise TypeError("Type must be Boolean")
            self.__g1_gha_flg = value

        @property
        def g1_nextgha(self):
            return self.__g1_nextgha

        @g1_nextgha.setter
        def g1_nextgha(self, value):
            self.__g1_nextgha = value

        @property
        def g1_l2_act(self):
            return self.__g1_l2_act

        @g1_l2_act.setter
        def g1_l2_act(self, value):
            if type(value) != bool:
                raise TypeError("Type must be Boolean")
            self.__g1_l2_act = value

        @property
        def g1_rest(self):
            return self.__g1_rest

        @g1_rest.setter
        def g1_rest(self, value):
            self.__g1_rest = value

        @property
        def g1_restlen_layer(self):
            return self.__g1_restlen_layer

        @g1_restlen_layer.setter
        def g1_restlen_layer(self, value):
            self.__g1_restlen_layer = value

        @property
        def g1_layer(self):
            return self.__g1_layer

        @g1_layer.setter
        def g1_layer(self, value):
            if value < self.LAYER_1 or value > self.LAYER_NUM:
                raise ValueError( "Value must be between " + str(self.LAYER_1) + " and " + str(self.LAYER_NUM))
            self.__g1_layer = value

        @staticmethod
        def gra1_state(self):
            return self.__gra1_state()

    class LAYER:
        def __init__(self):
            self.__offset = 0
            self.__dataptr = 0
            self.__datalen = 0

        @property
        def offset(self):
            return self.__offset

        @offset.setter
        def offset(self, value):
            self.__offset = value

        @property
        def dataptr(self):
            return self.__dataptr

        @dataptr.setter
        def dataptr(self, value):
            self.__dataptr = value

        @property
        def datalen(self):
            return self.__datalen

        @datalen.setter
        def datalen(self, value):
            self.__datalen = value

    class LCD_TYP_TAB_S:

        TO_NEXT = 3
        STOP_HERE = 5
        TO_FIRST = 1
        TO_THIS = 7

        LCD_TYP_TAB = [
            [
                30,  # RAM1_ZEILEN_ZA: Zeilen in LCD(hoch)
                40,  # RAM1_ZEICH_ZEILB: Brutto
                40,  # RAM1_ZEICH_ZEILN: Netto
                0,  # RAM1_TEXT_HADR: Text - HOME - Adr
                1200,  # RAM1_TEXT_SCLEN: LCD
                320,  # RAM1_GRAF_VERT: Anz
                240,  # RAM1_GRAF_COL: Anz
                0x4B0,  # RAM1_GRAF_HADR0: Graphic - Home - ADR - 0
                0x4B0,  # RAM1_GRAF_HADR1: Graphic - Home - ADR - 1
                9600,  # RAM1_GRAF_SCLEN: Ges - Laenge
                3 * 1024,  # RAM1_ECHG_ADR: Start - Adr
                128 * 8,  # RAM1_ECHG_LEN: Ges - Len
                128 * 8 - 1,  # RAM1_ECHG_LMASK: Len - Mask
                0,  # _DDD2_LCD_BASE_ADR: LCD - RAM
                3 * 1024 + 128 * 8,  # _DDD2_LCD_FILL_LEN: Inital - Fill - Len in LCD - RAM
                0,  # _DDD2_GRAF_DISPLACE: Graphic - ADR
                0,
                TO_NEXT,
                TO_FIRST
            ]
        ]

        def __init__(self, lcd_type):
            self.__ram1_zeilen_za = self.LCD_TYP_TAB[lcd_type][0]
            self.__ram1_zeich_zeilb = self.LCD_TYP_TAB[lcd_type][1]
            self.__ram1_zeich_zeiln = self.LCD_TYP_TAB[lcd_type][2]
            self.__ram1_text_hadr = self.LCD_TYP_TAB[lcd_type][3]
            self.__ram1_text_sclen = self.LCD_TYP_TAB[lcd_type][4]
            self.__ram1_graf_vert = self.LCD_TYP_TAB[lcd_type][5]
            self.__ram1_graf_col = self.LCD_TYP_TAB[lcd_type][6]
            self.__ram1_graf_hadr0 = self.LCD_TYP_TAB[lcd_type][7]
            self.__ram1_graf_hadr1 = self.LCD_TYP_TAB[lcd_type][8]
            self.__ram1_graf_sclen = self.LCD_TYP_TAB[lcd_type][9]
            self.__ram1_echg_adr = self.LCD_TYP_TAB[lcd_type][10]
            self.__ram1_echg_len = self.LCD_TYP_TAB[lcd_type][11]
            self.__ram1_echg_lmask = self.LCD_TYP_TAB[lcd_type][12]
            self.__ram1_lcd_base_adr = self.LCD_TYP_TAB[lcd_type][13]
            self.__ram1_lcd_fill_len = self.LCD_TYP_TAB[lcd_type][14]
            self.__ram1_graf_displace = self.LCD_TYP_TAB[lcd_type][15]
            self.__ram1_line_end = self.LCD_TYP_TAB[lcd_type][16]
            self.__ram1_screen_end = self.LCD_TYP_TAB[lcd_type][17]

        @property
        def ram1_text_hadr(self):
            return self.__ram1_text_hadr

        @ram1_text_hadr.setter
        def ram1_text_hadr(self, value):
            self.__ram1_text_hadr = value

        @property
        def ram1_graf_hadr0(self):
            return self.__ram1_graf_hadr0

        @ram1_graf_hadr0.setter
        def ram1_graf_hadr0(self, value):
            self.__ram1_graf_hadr0 = value

        @property
        def ram1_graf_hadr1(self):
            return self.__ram1_graf_hadr1

        @ram1_graf_hadr1.setter
        def ram1_graf_hadr1(self, value):
            self.__ram1_graf_hadr1 = value

        @property
        def ram1_graf_displace(self):
            return self.__ram1_graf_displace

        @ram1_graf_displace.setter
        def ram1_graf_displace(self, value):
            self.__ram1_graf_displace = value

        @property
        def ram1_graf_sclen(self):
            return self.__ram1_graf_sclen

        @ram1_graf_sclen.setter
        def ram1_graf_sclen(self, value):
            self.__ram1_graf_sclen = value

    LCD_TYP_TAB_NUM = 1

    METHOD_XOR = 0
    METHOD_AND_OR = 1
    METHOD_MAX = 2

    SYSTEM_SET = 0x40
    DISP_OFF   = 0x59
    SCROLL     = 0x44
    CSRFORM    = 0x5D
    OVLAY      = 0x5B
    HDOT_SCR   = 0x5A
    CSRW       = 0x46
    MWRITE      = 0x42
    MREAD      = 0x43

    L_ACTIVE = 0
    L_SAVE = 1
    L_NUM = 2

    def __lcd_mask_control(self, value):
        self.__pins["WR"].value(value)
        self.__qlcd_mask_control(value)

    def __qlcd_mask_control(self, value):
        self.__pins["RD"].value(value)
        self.__pins["CE"].value(value)
        self.__pins["C/D"].value(value)

    def __hw_out(self, data):
        for i in range(8):
            self.__pins['D' + str(i) ].value(  (data >> i) & 0x01 )

    def __write_data(self, data):

        self.__pins["CE"].low()
        self.__pins["C/D"].low()

        self.__hw_out(data)

        if self.__sende_methode != self.METHOD_XOR:

            wr_value = self.__pins["WR"].value()
            wr_value ^= 1
            self.__pins["WR"].value(wr_value)

            for i in range(self.__method_and_or_delay):
                continue

        wr_value = self.__pins["WR"].value()
        wr_value ^= 1
        self.__pins["WR"].value( wr_value )

        udelay(4)  # NOPS

        self.__qlcd_mask_control(0x01)

    def __bus_delay(self):
        for i in range(3):
            udelay(4700)

    def __write_cmd(self, cmd):
        self.__hw_out(cmd)

        self.__pins["CE"].value(0)

        if self.__sende_methode != self.METHOD_XOR:

            wr_value = self.__pins["WR"].value()
            wr_value ^= 1
            self.__pins["WR"].value(wr_value)

            for i in range(self.__method_and_or_delay):
                continue

        wr_value = self.__pins["WR"].value()
        wr_value ^= 1
        self.__pins["WR"].value(wr_value)

        udelay(4)  # NOPS

        self.__qlcd_mask_control(0x01)

    def __wr_cmd_wait(self, cmd):
        self.__write_cmd(cmd)
        self.__bus_delay()

    def __init_lcd_unit(self):
        self.__lcd_mask_control(0x01)

        self.__wr_cmd_wait(self.SYSTEM_SET)

        self.__write_data(0x30)
        self.__write_data(0x87)
        self.__write_data(0x07)
        self.__write_data(0x27)
        self.__write_data(0x2D)
        self.__write_data(0xEF)
        self.__write_data(0x28)
        self.__write_data(0x00)

        self.__write_cmd(self.CSRW)

        self.__write_data(0x00)
        self.__write_data(0x00)

        self.__write_cmd(self.MWRITE)

        for i in range(1200):
            self.__write_data(0x20)

        self.__write_cmd(self.CSRW)

        self.__write_data(0xB0)
        self.__write_data(0x04)

        self.__write_cmd(self.MWRITE)

        for i in range(9600):
            self.__write_data(0x00)

        self.__write_cmd(self.SCROLL)

        self.__write_data(self.__adr_text_layer & 0xFF)
        self.__write_data((self.__adr_text_layer >> 8) & 0xFF)
        self.__write_data(0xF0)
        self.__write_data(self.__adr_graphic_layer & 0xFF)
        self.__write_data((self.__adr_graphic_layer >> 8) & 0xFF)
        self.__write_data(0xF0)
        self.__write_data(0)
        self.__write_data(0)

        self.__write_data(0)
        self.__write_data(0)

        self.__bus_delay()

        self.__write_cmd(self.CSRFORM)

        self.__write_data(0x04)
        self.__write_data(0x86)

        self.__write_cmd(self.HDOT_SCR)

        self.__write_data(0x00)

        self.__write_cmd(self.OVLAY)

        self.__write_data(0)

        self.__write_cmd(0x59)

        self.__write_data(0x16)
        self.__i1.display_mode = 0x16

    def __set_power(self, power):
        power &= 0xFC
        if power == 0:
            return False
        self.__ram1_kbps_rate = power
        return True

    def __init__(self, p1=6, p2=8, p3a=1, p3b=0, p3c=4, p3d=3, p4=1, p5=15, p6=0x11, p7=0):
        if p1 != 6 and p1 != 8:
            raise ValueError("Logical data bus address must be either 6 or 8")

        if 0 > p4 > self.LCD_TYP_TAB_NUM:
            raise ValueError("LCD Type must be between 0 and " +str(self.LCD_TYP_TAB_NUM))

        if p7 >= self.METHOD_MAX:
            raise ValueError("Method must be between " + str(self.METHOD_AND_OR) + " and " + str(self.METHOD_XOR ))

        self.__pins= {}

        for i in range(8):
            name = str(p1 * 10 + i)
            self.__pins[ 'D' + str(i) ] = Pin("L"+name, Pin.OUT)

        prefix = "L" + str(p2)
        self.__pins["WR"] = Pin(prefix + str(p3a), Pin.OUT)
        self.__pins["RD"] = Pin(prefix + str(p3b), Pin.OUT)
        self.__pins["CE"] = Pin(prefix + str(p3c), Pin.OUT)
        self.__pins["C/D"] = Pin(prefix + str(p3d), Pin.OUT)
        self.__lcd_param = self.LCD_TYP_TAB_S(p4-1)


        self.__ram1_kbps_rate = 0
        self.__set_power(p5)

        self.__ram1_trans_speed = p6

        self.__sende_methode = p7

        tiger_clock = freq()[0] # clock frequency

        self.__nops_i_delay = (137.0 / 90.0 * self.__ram1_trans_speed) + 269.0/45.0
        self.__method_and_or_delay = 0

        if tiger_clock == 50_000_000:
            self.__nops_i_delay -= 9

        elif tiger_clock == 1000_000_000:
            self.__nops_i_delay -= 6
            self.__method_and_or_delay = 3
        else:
            self.__nops_i_delay -= 4
            self.__method_and_or_delay = 10

        if self.__nops_i_delay > 600000:
            self.__nops_i_delay = 1

        self.__set_power(self.__ram1_kbps_rate) #WHY????

        self.__i1 = self.I1(self.__i1_gra1_200)

        self.__i1.tadr_auto = self.__lcd_param.ram1_text_hadr
        self.__adr_text_layer = self.__lcd_param.ram1_text_hadr
        self.__adr_graphic_layer = self.__lcd_param.ram1_graf_hadr0

        self.__layer = [[self.LAYER()] * self.L_NUM] * self.__i1.LAYER_NUM

        self.__init_lcd_unit()

        self.__ram1_xor_out = 0

    def __address_pointer_set(self,addr):
        self.__write_cmd(self.CSRW)
        self.__write_data(addr & 0xFF)
        self.__write_data(addr >> 8)

    def __i1_gra1_v300(self):
       # print("__i1_gra1_v300")
        l_idx = self.__i1.g1_layer
        data_len = self.__ram1_kbps_rate

        if data_len > self.__layer[l_idx][self.L_ACTIVE].datalen:
            if self.__layer[l_idx][self.L_ACTIVE].datalen == 0:
                self.__i1_gra1_v390(True,l_idx)
                return
            else:
                data_len = self.__layer[l_idx][self.L_ACTIVE].datalen

        if self.__i1.g1_rest < data_len:
            if self.__i1.g1_rest == 0:
                self.__i1_gra1_v390(True,l_idx)
                return
            data_len = self.__i1.g1_rest

        if self.__i1.g1_restlen_layer < data_len:
            if self.__i1.g1_restlen_layer == 0:
                self.__i1_gra1_v390(True, l_idx)
                return
            data_len = self.__i1.g1_restlen_layer

        self.__i1_gra1_v300_hw_send(self.__layer[l_idx][self.L_ACTIVE].dataptr, None, data_len)
        self.__i1.g1_rest -= data_len
        if self.__i1.g1_rest == 0:
            self.__i1_gra1_v390(True,l_idx)
            return

        self.__layer[l_idx][self.L_ACTIVE].datalen -= data_len
        self.__layer[l_idx][self.L_ACTIVE].dataptr = self.__layer[l_idx][self.L_ACTIVE].dataptr[data_len:]

        self.__i1.g1_restlen_layer -= data_len
        if self.__i1.g1_restlen_layer == 0:
            self.__i1.g1_restlen_layer = self.__i1.g1_rest
            self.__i1.gra1_state = self.__i1_gra1_200_l2_12
        else:
            if self.__layer[l_idx][self.L_ACTIVE].datalen == 0:
                self.__i1_gra1_v390( True, l_idx )
                return

    def __i1_gra1_v300_hw_send(self, data_ptr, data_ptr_2, data_len):
       # print("__i1_gra1_v300_hw_send")
       # print(len(data_ptr), data_len)
        xor_out = self.__ram1_xor_out
        nops_i_delay_local = int(self.__nops_i_delay // 10) #tiger uses us * 10
        method_and_or_delay_local = self.__method_and_or_delay

        self.__pins["CE"].low()
        self.__pins["C/D"].low()


        for i in range(data_len):

            data = data_ptr[i] if data_ptr_2 is None else data_ptr[i] | data_ptr_2[i]
            data ^= xor_out


            self.__hw_out(data)


            wr_value = self.__pins["WR"].value()
            wr_value ^= 1
            self.__pins["WR"].value(wr_value)

            if self.__sende_methode != self.METHOD_XOR:

                for k in range(method_and_or_delay_local):
                    continue
                wr_value ^= 1
                self.__pins["WR"].value(wr_value)

            udelay(nops_i_delay_local)

    def __i1_gra1_200(self):
      #  print("__i1_gra1_200")
        self.__write_cmd(self.MWRITE)
        self.__i1.gra1_state = self.__i1_gra1_v300

    def __i1_gra1_v300_l2_12(self):
      #  print("__i1_gra1_v300_l2_12")
        data_len = self.__ram1_kbps_rate

        i1_g1_datalen = 0
        if self.__layer[self.__i1.LAYER_2][self.L_ACTIVE].datalen < self.__layer[self.__i1.LAYER_1][
            self.L_ACTIVE].datalen:
            i1_g1_datalen = self.__layer[self.__i1.LAYER_2][self.L_ACTIVE].datalen
        else:
            i1_g1_datalen = self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].datalen

        if data_len > i1_g1_datalen:

            if i1_g1_datalen == 0:
                self.__i1_gra1_v390(False)
                return
            else:
                data_len = i1_g1_datalen

        if self.__i1.g1_rest < data_len:

            if self.__i1.g1_rest == 0:
                self.__i1_gra1_v390(False)
                return

            data_len = self.__i1.g1_rest

        self.__i1_gra1_v300_hw_send(self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].dataptr, self.__layer[self.__i1.LAYER_2][self.L_ACTIVE].dataptr, data_len)

        self.__i1.g1_rest -= data_len

        if self.__i1.g1_rest == 0:
            self.__i1_gra1_v390(False)
            return

        self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].datalen -= data_len
        self.__layer[self.__i1.LAYER_2][self.L_ACTIVE].datalen -= data_len

        self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].dataptr += data_len
        self.__layer[self.__i1.LAYER_2][self.L_ACTIVE].dataptr = self.__layer[self.__i1.LAYER_2][self.L_ACTIVE].dataptr[data_len:]

        if self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].datalen == 0 or self.__layer[self.__i1.LAYER_2][self.L_ACTIVE].datalen == 0:
            self.__i1.__gra1_state = self.__i1_gra1_400_l2_12
            return

    def __i1_gra1_200_l2_12(self):
       # print("__i1_gra1_200_l2_12")
        self.__write_cmd(self.MWRITE)
        self.__i1.gra1_state = self.__i1_gra1_v300_l2_12

    def __i1_gra1_100(self):
      #  print("__i1_gra1_100")
        write_addr = 0
        if self.__i1.g1_gha_flg:
            self.__i1.g1_gha_flg = False
            write_addr = self.__lcd_param.ram1_graf_hadr0
        else:
            self.__i1.g1_gha_flg = False
            write_addr = self.__lcd_param.ram1_graf_hadr1

        self.__i1.g1_nextgha = write_addr

        write_addr += self.__lcd_param.ram1_graf_displace

        if not self.__i1.g1_l2_act:
            if self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].datalen == 0:
                #__i1_gra1_400()
                return

            if self.__lcd_param.ram1_graf_sclen <= self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].offset:
                #__i1_gra1_400
                return

            self.__i1.g1_rest = self.__lcd_param.ram1_graf_sclen - self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].offset
            self.__i1.g1_restlen_layer = self.__i1.g1_rest
            self.__i1.g1_layer = self.__i1.LAYER_1
            self.__i1.gra1_state = self.__i1_gra1_200
        elif self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].offset > self.__layer[self.__i1.LAYER_2][self.L_ACTIVE].offset:

            write_addr += self.__layer[self.__i1.LAYER_2][self.L_ACTIVE].offset
            if self.__lcd_param.ram1_graf_sclen <= self.__layer[self.__i1.LAYER_2][self.L_ACTIVE].offset:
                #i1_gra1_400_l2_12()
                return

            self.__i1.g1_rest = self.__lcd_param.ram1_graf_sclen - self.__layer[self.__i1.LAYER_2][self.L_ACTIVE].offset
            self.__i1.g1_restlen_layer = self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].offset - self.__layer[self.__i1.LAYER_2][self.L_ACTIVE].offset
            self.__i1.g1_layer = self.__i1.LAYER_2
            self.__i1.gra1_state = self.__i1_gra1_200

        elif self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].offset < self.__layer[self.__i1.LAYER_2][self.L_ACTIVE].offset:

            write_addr += self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].offset
            if self.__lcd_param.ram1_graf_sclen <= self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].offset:
                # i1_gra1_400_l2_12()
                return

            self.__i1.g1_rest = self.__lcd_param.ram1_graf_sclen - self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].offset
            self.__i1.g1_restlen_layer = self.__layer[self.__i1.LAYER_2][self.L_ACTIVE].offset - self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].offset
            self.__i1.g1_layer = self.__i1.LAYER_1
            self.__i1.gra1_state = self.__i1_gra1_200

        else:
            write_addr += self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].offset

            if self.__lcd_param.ram1_graf_sclen <= self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].offset:
                # i1_gra1_400_l2_12()
                return

            self.__i1.g1_rest = self.__lcd_param.ram1_graf_sclen - self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].offset
            self.__i1.g1_restlen_layer =  self.__i1.g1_rest
            self.__i1.gra1_state = self.__i1_gra1_200_l2_12

        self.__address_pointer_set(write_addr)

    def __i1_gra1_v390(self,is_valid,idx=0):
       # print("__i1_gra1_v390")
        if is_valid:
            self.__i1.gra1_state = self.__i1_gra1_400
            self.__layer[idx][self.L_ACTIVE].datalen = 0
        else:
            self.__i1.gra1_state = self.__i1_gra1_400_l2_12

    def __i1_gra1_400_common_finish(self):
      #  print("__i1_gra1_400_common_finish")
        self.__i1.modus = self.__i1.I1_0INACTIVE
        self.__i1.gra1_state = self.__i1_gra1_100

        self.__i1.g1_actflg = False

    def __i1_gra1_400(self):
     #   print("__i1_gra1_400")
        l_idx = self.__i1.g1_layer
        l2_idx =  self.__i1.LAYER_2 if  self.__i1.g1_layer == self.__i1.LAYER_1 else self.__i1.LAYER_1

        if self.__layer[l2_idx][self.L_ACTIVE].offset > self.__layer[l_idx][self.L_ACTIVE].offset:
            write_addr = self.__i1.g1_nextgha + self.__layer[l2_idx][self.L_ACTIVE].offset + self.__lcd_param.ram1_graf_displace

            if self.__lcd_param.ram1_graf_sclen <= self.__layer[l2_idx][self.L_ACTIVE].offset:
                #self.__i1.gra1_400_l2_12()
                return

            self.__i1.g1_rest = self.__lcd_param.ram1_graf_sclen - self.__layer[l2_idx][self.L_ACTIVE].offset
            self.__i1.g1_restlen_layer = self.__i1.g1_rest
            self.__address_pointer_set(write_addr)

            self.__i1.g1_restlen_layer = l2_idx
            self.__i1.gra1_state = self.__i1_gra1_200

        else:

            self.__i1_gra1_400_common_finish()

    def __i1_gra1_400_l2_12(self):
      #  print("__i1_gra1_400_l2_12")
        if self.__layer[self.__i1.LAYER_2][self.L_ACTIVE].datalen == 0 and self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].datalen > 0:

            self.g1_layerg1_layer = self.__i1.LAYER_1
            self.__i1.gra1_state = self.__i1_gra1_200

        elif self.__layer[self.__i1.LAYER_1][self.L_ACTIVE].datalen == 0 and self.__layer[self.__i1.LAYER_2][self.L_ACTIVE].datalen > 0:

            self.__i1.g1_layer = self.__i1.LAYER_2
            self.__i1.gra1_state = self.__i1_gra1_200

        else:

            self.__i1_gra1_400_common_finish()

    def __rsv_no_l2_output(self, l1, l2):
        self.__layer[l2][self.L_ACTIVE].offset = self.__layer[l1][self.L_ACTIVE].offset
        self.__layer[l2][self.L_ACTIVE].datalen = 0

    def __rsv_offs_equal(self, l1, l2):
        if self.__layer[l1][self.L_ACTIVE].datalen > self.__layer[l2][self.L_ACTIVE].datalen:
            self.__layer[l2][self.L_ACTIVE].datalen = self.__layer[l1][self.L_ACTIVE].datalen

    def __recalculate_string(self, l1, l2):
        if self.__layer[l1][self.L_ACTIVE].offset == self.__layer[l2][self.L_ACTIVE].offset:
            self.__rsv_offs_equal(l1,l2)
        elif self.__layer[l1][self.L_ACTIVE].offset < self.__layer[l2][self.L_ACTIVE].offset:
            if self.__layer[l1][self.L_ACTIVE].offset  + self.__layer[l1][self.L_ACTIVE].datalen < self.__layer[l2][self.L_ACTIVE].offset:
                self.__rsv_no_l2_output(l1,l2)
            else:
                tmp = self.__layer[l1][self.L_ACTIVE].offset + self.__layer[l1][self.L_ACTIVE].datalen - self.__layer[l2][self.L_ACTIVE].offset
                if tmp < self.__layer[l2][self.L_ACTIVE].datalen:
                    self.__layer[l2][self.L_ACTIVE].datalen = tmp
        else: #why in the C code is it not an else here?
            diff_offset = self.__layer[l1][self.L_ACTIVE].offset - self.__layer[l2][self.L_ACTIVE].offset
            self.__layer[l2][self.L_ACTIVE].datalen -= diff_offset
            self.__layer[l2][self.L_ACTIVE].dataptr = self.__layer[l2][self.L_ACTIVE].dataptr[diff_offset:self.__layer[l2][self.L_ACTIVE].datalen]
            self.__layer[l2][self.L_ACTIVE].offset = self.__layer[l1][self.L_ACTIVE].offset
            self.__rsv_offs_equal(l1, l2)

    def print(self, sek_addr, pixel_string, lcd_offset, src_offset, src_len):

        if sek_addr == 0:
            return
        elif sek_addr == 1 or sek_addr == 2:
            act_layer = 0
            sec_layer = 0

            size = len(pixel_string)

            if size > 0xFFFF:
                size = 0xFFFF

            if sek_addr == 1:
                act_layer = self.__i1.LAYER_1
                sec_layer = self.__i1.LAYER_2
            else:
                act_layer = self.__i1.LAYER_2
                sec_layer = self.__i1.LAYER_1

            self.__i1.g1_actflg = False
            
            self.__layer[act_layer][self.L_ACTIVE].offset = 0
            self.__layer[act_layer][self.L_SAVE].offset = 0
            self.__layer[act_layer][self.L_ACTIVE].datalen = size
            self.__layer[act_layer][self.L_SAVE].datalen = self.__layer[act_layer][self.L_ACTIVE].datalen
            self.__layer[act_layer][self.L_ACTIVE].dataptr = pixel_string
            self.__layer[act_layer][self.L_SAVE].dataptr = self.__layer[act_layer][self.L_ACTIVE].dataptr

          #  print(size,act_layer,sec_layer,self.L_ACTIVE, self.L_SAVE)

            #if( (U16)(shared_iram->bip - ptr_to_od_list) < len_of_od_list ) line 4029

            if lcd_offset >= self.__lcd_param.ram1_graf_sclen:
                self.__lcd_param.ram1_graf_sclen = lcd_offset

            self.__layer[act_layer][self.L_ACTIVE].offset = lcd_offset
            self.__layer[act_layer][self.L_SAVE].offset = lcd_offset

            if src_offset >= self.__layer[act_layer][self.L_ACTIVE].datalen:
                self.__layer[act_layer][self.L_ACTIVE].datalen = 0

            wa = self.__layer[act_layer][self.L_ACTIVE].datalen
            wa -= src_offset
            src_offset = self.__layer[act_layer][self.L_ACTIVE].dataptr[src_offset:]
            self.__layer[act_layer][self.L_ACTIVE].dataptr = src_offset
            self.__layer[act_layer][self.L_SAVE].dataptr = self.__layer[act_layer][self.L_ACTIVE].dataptr
            self.__layer[act_layer][self.L_ACTIVE].datalen = wa
            self.__layer[act_layer][self.L_SAVE].datalen = self.__layer[act_layer][self.L_ACTIVE].datalen

            if self.__layer[act_layer][self.L_ACTIVE].datalen > src_len:
                self.__layer[act_layer][self.L_ACTIVE].datalen = src_len
                self.__layer[act_layer][self.L_SAVE].datalen = self.__layer[act_layer][self.L_ACTIVE].datalen

            #end of if from line 4029

            if self.__lcd_param.ram1_graf_sclen < self.__layer[act_layer][self.L_ACTIVE].datalen:
                self.__layer[act_layer][self.L_ACTIVE].datalen = self.__lcd_param.ram1_graf_sclen
                self.__layer[act_layer][self.L_SAVE].datalen = self.__layer[act_layer][self.L_ACTIVE].datalen


            if sek_addr == 2:
                self.__i1.g1_gha_flg = True

            if self.__i1.g1_gha_flg:
                self.__layer[act_layer][self.L_ACTIVE].offset  =  self.__layer[act_layer][self.L_SAVE].offset
                self.__layer[act_layer][self.L_ACTIVE].dataptr =  self.__layer[act_layer][self.L_SAVE].dataptr
                self.__layer[act_layer][self.L_ACTIVE].datalen =  self.__layer[act_layer][self.L_SAVE].datalen

            self.__recalculate_string(act_layer, sec_layer)

            self.__i1.g1_actflg = True
        elif sek_addr == 7:
            return
        else:
            raise ValueError("Sek Addr must be either 0, 1, 2 or 7")

        while self.__i1.g1_actflg:
            self.__ddr_int()
            udelay(1000)

    def __ddr_int(self):
        self.__qlcd_mask_control(0x01)

        if self.__i1.modus == self.__i1.I1_0INACTIVE:
            if self.__i1.g1_actflg:
                self.__i1.modus = self.__i1.I1_4GRAPH1
                self.__i1_gra1_100()
        elif self.__i1.modus == self.__i1.I1_4GRAPH1:
            self.__i1.gra1_state()

        else:
            print("Inactive")

        self.__qlcd_mask_control(0x00)




reset_lcd = Pin("L85", Pin.OUT)
reset_lcd.low()
reset_lcd.high()
pyb.delay(100)

backlight = Pin("L82", Pin.OUT)
backlight.low()

lcd = QLCD(p5=250,p6=2)


lcd.print(1, bmp, 0, 0, 9600)